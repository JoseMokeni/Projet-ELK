input {
  # MySQL Slow Query Logs
  file {
    path => "/logs/mysql/*.log"
    # path => "/logs/mysql/slow-query.log"
    type => "mysql-slow"
    start_position => "beginning"
    sincedb_path => "/dev/null"  # Force reading from beginning
    mode => "tail"
    codec => multiline {
      pattern => "^# Time"
      negate => true
      what => "previous"
    }
    discover_interval => 15
  }
  
  # Nginx Logs (JSON)
  file {
    path => "/logs/nginx/*.log"
    # path => "/logs/nginx/access.log"
    type => "nginx-access"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    mode => "tail"
    codec => json
    discover_interval => 15
  }
  
  # System Metrics
  file {
    path => "/logs/system/*.log"
    # path => "/logs/system/metrics.log"
    type => "system-metrics"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    mode => "tail"
    discover_interval => 15
  }
}

filter {
  # Simplify filters for initial testing
  if [type] == "mysql-slow" {
    grok {
      break_on_match => false
      match => {
        "message" => [
          "# Time: %{TIMESTAMP_ISO8601:timestamp}",
          "# User@Host: %{DATA:user}\[%{DATA:username}\] @ %{DATA:host} \[%{DATA:ip}\]",
          "# Query_time: %{NUMBER:query_time:float}\s+Lock_time: %{NUMBER:lock_time:float}",
          "Rows_sent: %{NUMBER:rows_sent:integer}\s+Rows_examined: %{NUMBER:rows_examined:integer}",
          "SET timestamp=%{NUMBER:mysql_timestamp};",
          "^(?!#|SET timestamp)(?<query>.*?)(?=(\n#|$))"
        ]
      }
      pattern_definitions => {
        "SQL_QUERY" => "(?m)(?<=;\n)([^#].*$)"
      }
    }
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
      remove_field => ["timestamp", "message", "event"]
    }
    mutate {
      convert => {
        "rows_sent" => "integer"
        "rows_examined" => "integer"
      }
      gsub => [
        "query", "^\s+", "",  # Remove leading whitespace
        "query", "\s+$", ""   # Remove trailing whitespace
      ]
    }
  }
  
  else if [type] == "nginx-access" {
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }
  
  else if [type] == "system-metrics" {
    grok {
      match => { "message" => "%{WORD:metric_name}\s+%{NUMBER:metric_value:float}" }
    }
  }
}

output {
  
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{type}-%{+YYYY.MM.dd}"
    action => "index"
    manage_template => false
  }
  # Enable debug output
  stdout { codec => rubydebug }
}